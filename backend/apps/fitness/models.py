# backend/apps/fitness/models.py

from django.db import models
from django.contrib.auth.models import User
from django.core.validators import MinValueValidator, MaxValueValidator
import uuid

class Exercise(models.Model):
    """Exercise database with detailed information"""
    CATEGORY_CHOICES = [
        ('strength', 'Strength Training'),
        ('cardio', 'Cardiovascular'),
        ('flexibility', 'Flexibility'),
        ('balance', 'Balance'),
        ('sports', 'Sports'),
        ('functional', 'Functional'),
    ]
    
    DIFFICULTY_CHOICES = [
        ('beginner', 'Beginner'),
        ('intermediate', 'Intermediate'),
        ('advanced', 'Advanced'),
    ]
    
    EQUIPMENT_CHOICES = [
        ('bodyweight', 'Bodyweight'),
        ('dumbbells', 'Dumbbells'),
        ('barbell', 'Barbell'),
        ('resistance_bands', 'Resistance Bands'),
        ('kettlebell', 'Kettlebell'),
        ('machine', 'Machine'),
        ('cable', 'Cable'),
        ('medicine_ball', 'Medicine Ball'),
        ('suspension', 'Suspension Trainer'),
        ('cardio_machine', 'Cardio Machine'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=200)
    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)
    difficulty = models.CharField(max_length=20, choices=DIFFICULTY_CHOICES)
    equipment = models.CharField(max_length=30, choices=EQUIPMENT_CHOICES)
    
    # Exercise details
    description = models.TextField()
    instructions = models.TextField()
    tips = models.TextField(blank=True)
    
    # Muscle groups
    primary_muscles = models.JSONField(default=list)  # ['chest', 'triceps']
    secondary_muscles = models.JSONField(default=list)
    
    # Metrics
    calories_per_minute = models.FloatField(validators=[MinValueValidator(0)])
    
    # Media
    image_url = models.URLField(blank=True)
    video_url = models.URLField(blank=True)
    
    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)

    class Meta:
        ordering = ['name']
        indexes = [
            models.Index(fields=['category', 'difficulty']),
            models.Index(fields=['equipment']),
        ]

    def __str__(self):
        return f"{self.name} ({self.category})"


class WorkoutTemplate(models.Model):
    """Pre-defined workout templates"""
    WORKOUT_TYPE_CHOICES = [
        ('strength', 'Strength Training'),
        ('cardio', 'Cardio'),
        ('hiit', 'HIIT'),
        ('circuit', 'Circuit Training'),
        ('yoga', 'Yoga'),
        ('pilates', 'Pilates'),
        ('functional', 'Functional Training'),
        ('sports', 'Sports Training'),
    ]
    
    DIFFICULTY_CHOICES = [
        ('beginner', 'Beginner'),
        ('intermediate', 'Intermediate'),
        ('advanced', 'Advanced'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=200)
    description = models.TextField()
    workout_type = models.CharField(max_length=20, choices=WORKOUT_TYPE_CHOICES)
    difficulty = models.CharField(max_length=20, choices=DIFFICULTY_CHOICES)
    
    # Duration and intensity
    estimated_duration = models.IntegerField(help_text="Duration in minutes")
    intensity_level = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        help_text="Intensity level 1-10"
    )
    
    # Requirements
    equipment_needed = models.JSONField(default=list)
    space_required = models.CharField(max_length=50, default='small')  # small, medium, large
    
    # Target audience
    fitness_level = models.CharField(max_length=20, choices=DIFFICULTY_CHOICES)
    target_goals = models.JSONField(default=list)  # ['weight_loss', 'muscle_gain', 'endurance']
    
    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)

    class Meta:
        ordering = ['name']

    def __str__(self):
        return f"{self.name} ({self.workout_type})"


class WorkoutPlan(models.Model):
    """User's personalized workout plan generated by AI"""
    PLAN_TYPE_CHOICES = [
        ('weekly', 'Weekly Plan'),
        ('monthly', 'Monthly Plan'),
        ('custom', 'Custom Duration'),
    ]
    
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('active', 'Active'),
        ('completed', 'Completed'),
        ('paused', 'Paused'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='workout_plans')
    
    # Plan details
    name = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    plan_type = models.CharField(max_length=20, choices=PLAN_TYPE_CHOICES)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    
    # Duration
    start_date = models.DateField()
    end_date = models.DateField()
    total_weeks = models.IntegerField()
    
    # AI generation details
    ai_generated = models.BooleanField(default=True)
    generation_prompt = models.TextField(blank=True)
    ai_confidence_score = models.FloatField(
        validators=[MinValueValidator(0), MaxValueValidator(1)],
        null=True, blank=True
    )
    
    # Plan data (AI-generated structure)
    plan_data = models.JSONField(default=dict)
    
    # User customization
    user_modifications = models.JSONField(default=dict)
    
    # Progress tracking
    completion_percentage = models.FloatField(default=0.0)
    total_workouts = models.IntegerField(default=0)
    completed_workouts = models.IntegerField(default=0)
    
    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['user', 'status']),
            models.Index(fields=['start_date', 'end_date']),
        ]

    def __str__(self):
        return f"{self.user.username} - {self.name}"

    @property
    def is_active(self):
        return self.status == 'active'

    def update_completion_percentage(self):
        """Update completion percentage based on completed workouts"""
        if self.total_workouts > 0:
            self.completion_percentage = (self.completed_workouts / self.total_workouts) * 100
        else:
            self.completion_percentage = 0.0
        self.save()


class Workout(models.Model):
    """Individual workout session"""
    STATUS_CHOICES = [
        ('scheduled', 'Scheduled'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('skipped', 'Skipped'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='workouts')
    workout_plan = models.ForeignKey(
        WorkoutPlan, 
        on_delete=models.CASCADE, 
        related_name='workouts',
        null=True, blank=True
    )
    
    # Workout details
    name = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    workout_type = models.CharField(max_length=20, choices=WorkoutTemplate.WORKOUT_TYPE_CHOICES)
    
    # Scheduling
    scheduled_date = models.DateField()
    scheduled_time = models.TimeField(null=True, blank=True)
    
    # Execution
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='scheduled')
    started_at = models.DateTimeField(null=True, blank=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    actual_duration = models.IntegerField(null=True, blank=True, help_text="Duration in minutes")
    
    # Performance metrics
    total_calories_burned = models.IntegerField(null=True, blank=True)
    average_heart_rate = models.IntegerField(null=True, blank=True)
    max_heart_rate = models.IntegerField(null=True, blank=True)
    
    # User feedback
    difficulty_rating = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        null=True, blank=True
    )
    energy_level_before = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        null=True, blank=True
    )
    energy_level_after = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        null=True, blank=True
    )
    notes = models.TextField(blank=True)
    
    # Workout structure
    workout_data = models.JSONField(default=dict)  # Detailed workout structure
    
    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-scheduled_date', '-scheduled_time']
        indexes = [
            models.Index(fields=['user', 'status']),
            models.Index(fields=['scheduled_date']),
            models.Index(fields=['workout_plan']),
        ]

    def __str__(self):
        return f"{self.user.username} - {self.name} ({self.scheduled_date})"

    @property
    def duration_minutes(self):
        """Calculate workout duration in minutes"""
        if self.started_at and self.completed_at:
            delta = self.completed_at - self.started_at
            return int(delta.total_seconds() / 60)
        return self.actual_duration


class WorkoutExercise(models.Model):
    """Exercise within a workout with specific sets/reps/weight"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    workout = models.ForeignKey(Workout, on_delete=models.CASCADE, related_name='exercises')
    exercise = models.ForeignKey(Exercise, on_delete=models.CASCADE)
    
    # Order in workout
    order = models.IntegerField(default=0)
    
    # Exercise parameters
    sets_planned = models.IntegerField(validators=[MinValueValidator(1)])
    reps_planned = models.IntegerField(validators=[MinValueValidator(1)], null=True, blank=True)
    weight_planned = models.FloatField(validators=[MinValueValidator(0)], null=True, blank=True)
    duration_planned = models.IntegerField(null=True, blank=True, help_text="Duration in seconds")
    rest_duration = models.IntegerField(default=60, help_text="Rest between sets in seconds")
    
    # Actual performance
    sets_completed = models.IntegerField(default=0)
    performance_data = models.JSONField(default=list)  # [{set: 1, reps: 10, weight: 50, duration: 30}]
    
    # Notes
    notes = models.TextField(blank=True)
    
    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['order']
        unique_together = ['workout', 'exercise', 'order']

    def __str__(self):
        return f"{self.workout.name} - {self.exercise.name}"

    @property
    def completion_percentage(self):
        """Calculate completion percentage of this exercise"""
        if self.sets_planned > 0:
            return (self.sets_completed / self.sets_planned) * 100
        return 0.0


class FitnessGoal(models.Model):
    """User's fitness goals with progress tracking"""
    GOAL_TYPE_CHOICES = [
        ('weight_loss', 'Weight Loss'),
        ('muscle_gain', 'Muscle Gain'),
        ('strength', 'Strength Improvement'),
        ('endurance', 'Endurance'),
        ('flexibility', 'Flexibility'),
        ('body_composition', 'Body Composition'),
        ('performance', 'Athletic Performance'),
        ('health', 'General Health'),
    ]
    
    STATUS_CHOICES = [
        ('active', 'Active'),
        ('completed', 'Completed'),
        ('paused', 'Paused'),
        ('cancelled', 'Cancelled'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='fitness_goals')
    
    # Goal details
    title = models.CharField(max_length=200)
    description = models.TextField()
    goal_type = models.CharField(max_length=20, choices=GOAL_TYPE_CHOICES)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='active')
    
    # Metrics
    target_value = models.FloatField()
    current_value = models.FloatField(default=0.0)
    unit = models.CharField(max_length=20)  # kg, lbs, minutes, reps, etc.
    
    # Timeline
    start_date = models.DateField()
    target_date = models.DateField()
    completed_date = models.DateField(null=True, blank=True)
    
    # Progress tracking
    progress_percentage = models.FloatField(default=0.0)
    milestones = models.JSONField(default=list)
    
    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.username} - {self.title}"

    def update_progress(self):
        """Update progress percentage based on current vs target value"""
        if self.target_value > 0:
            self.progress_percentage = min((self.current_value / self.target_value) * 100, 100)
        else:
            self.progress_percentage = 0.0
        
        if self.progress_percentage >= 100 and self.status == 'active':
            self.status = 'completed'
            self.completed_date = models.DateField.today()
        
        self.save()


class FitnessMetric(models.Model):
    """Track various fitness metrics over time"""
    METRIC_TYPE_CHOICES = [
        ('weight', 'Weight'),
        ('body_fat', 'Body Fat Percentage'),
        ('muscle_mass', 'Muscle Mass'),
        ('resting_heart_rate', 'Resting Heart Rate'),
        ('max_heart_rate', 'Max Heart Rate'),
        ('vo2_max', 'VO2 Max'),
        ('strength_1rm', '1 Rep Max'),
        ('flexibility_score', 'Flexibility Score'),
        ('endurance_time', 'Endurance Time'),
        ('custom', 'Custom Metric'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='fitness_metrics')
    
    # Metric details
    metric_type = models.CharField(max_length=20, choices=METRIC_TYPE_CHOICES)
    custom_name = models.CharField(max_length=100, blank=True)
    value = models.FloatField()
    unit = models.CharField(max_length=20)
    
    # Context
    exercise_name = models.CharField(max_length=200, blank=True)  # For strength metrics
    notes = models.TextField(blank=True)
    
    # Metadata
    recorded_date = models.DateField()
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-recorded_date']
        indexes = [
            models.Index(fields=['user', 'metric_type']),
            models.Index(fields=['recorded_date']),
        ]

    def __str__(self):
        metric_name = self.custom_name if self.metric_type == 'custom' else self.get_metric_type_display()
        return f"{self.user.username} - {metric_name}: {self.value} {self.unit}"